// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String         @id @default(cuid())
  name      String
  email     String         @unique
  password  String
  locations UserLocation[]
}

model Course {
  id          String         @id
  name        String
  title       String
  description String
  districts   String
  distance    Int
  time        Int
  points      CoursePoint[]
  locations   Location[]
  routes Route[]

  startingPointId String
  startingPoint StartingPoint @relation(fields: [startingPointId],references: [id])
}

model Location {
  id           String           @id
  number       Int
  image        String
  title        String
  description  String
  place Route?
  userAchieves UserLocation[]
  topic        LocationTopics[]
  culture LocationCulture[]
  referenceId  String?
  reference    Location?        @relation("LocationReference", fields: [referenceId], references: [id])
  referencedBy Location[]       @relation("LocationReference")

  nextId String?
  next Location? @relation("LocationNext",fields: [nextId],references: [id])
  before Location [] @relation("LocationNext")

  qr Boolean
  qrId String @default(cuid()) @unique
  courseId     String
  course       Course           @relation(fields: [courseId], references: [id])
}

model StartingPoint {
  id           String           @id @default(cuid())
  name String
  address String
  google String
  place Route?
  course Course[]
}

model Route {
  id String @id @default(cuid())
  name String?

  sort DateTime @default(now())

  latitude String
  longitude String

  locationId String? @unique
  startingPointId String? @unique
  courseId String

  display Boolean

  location Location? @relation(fields: [locationId],references: [id])
  startingPoint StartingPoint? @relation(fields: [startingPointId],references: [id])
  course Course? @relation(fields: [courseId],references: [id])
}

model Point {
  id          String         @id @default(cuid())
  title       String
  discription String?
  course      CoursePoint[]
}
model UserLocation {
  userId     String
  locationId String
  achievedAt DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id])
  location Location @relation(fields: [locationId], references: [id])

  @@id([userId, locationId])
}

model Topic {
  id          String           @id @default(cuid())
  name        String
  description String
  location    LocationTopics[]
}

model LocationTopics {
  locationId String
  topicId    String

  location Location @relation(fields: [locationId], references: [id])
  topic    Topic    @relation(fields: [topicId], references: [id])

  @@id([locationId, topicId])
}

model CoursePoint {
  courseId String
  pointId  String

  course Course @relation(fields: [courseId], references: [id])
  point  Point  @relation(fields: [pointId], references: [id])

  @@id([courseId, pointId])
}

model LocationCulture {
  locationId String
  cultureId String

  location Location @relation(fields: [locationId],references: [id])
  culture Culture @relation(fields: [cultureId],references: [id])

  @@id([locationId,cultureId])
}

model Culture {
  id String @id @default(cuid())
  name String
  location LocationCulture[]
}